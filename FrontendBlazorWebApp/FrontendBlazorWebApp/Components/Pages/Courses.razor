@page "/courses"
@using FrontendBlazorWebApp.Client.Models
@using System.Text.Json
@using System.Text
@attribute [StreamRendering]
@attribute [Authorize]

<PageTitle>Courses</PageTitle>

<section class="courses">
    <div class="container">
        <div class="action-buttons">
            <i class="fa-solid fa-house"></i>
            <a asp-controller="Home" asp-action="Index">Home</a>
            <i class="fa-solid fa-angles-right"></i>
            <a asp-action="Course" asp-controller="Courses">Courses</a>
        </div>
        <div class="header-courses">
            <div class="header-left">
                <h1>Courses</h1>
            </div>
            <div class="header-right">
                <form>
                    <div class="select">
                        <div class="selected">All Categories<i class="arrow-down fas fa-chevron-down"></i></div>
                        <div class="select-options">
                            <div class="option" data-value="all">All Categories</div>
                            <div class="option" data-value="all">HTML</div>
                        </div>
                    </div>

                    <div class="input-search-group">
                        <input id="searchQuery" name="searchQuery" placeholder="Search Courses" />
                        <i class="fa-solid fa-magnifying-glass"></i>
                    </div>

                </form>
            </div>
        </div>
        <div class="courses-square">
            @if (courses != null)
            {
                foreach (var course in courses)
                {
                    <div class="grid-item">
                        @if (course.IsBestseller)
                        {
                            <div class="text-top">Best Seller</div>
                        }
                        <a class="button-top" data-courseid="@course.Id" data-bs-toggle="tooltip" data-bs-title="Save Course"><i class="fa-regular fa-bookmark"></i></a>
                        <img src="@course.ImageUri" alt="Image of @course.Title">
                        <a href="/course-details">
                            <div class="text-info">
                                <h5>@course.Title</h5>
                                @* <p class="creator">By @course.Authors.Name</p> *@
                                <p class="creator">By @string.Join(", ", course.Authors!.Select(a => a.Name))</p>
@*                                 @if (!string.IsNullOrEmpty(course.Prices.Discount) && course.DiscountPrice != "0")
                                {
                                    <p class="price discount">$@course.DiscountPrice <del>$@course.Price</del></p>
                                }
                                else
                                {
                                    <p class="price">$@course.Price</p>
                                } *@
                                @if (course.Prices != null)
                                {
                                    @if (course.Prices.Discount > 0)
                                    {
                                        <p class="price discount">
                                            @course.Prices.Currency @course.Prices.Discount
                                            <del>@course.Prices.Currency @course.Prices.Price</del>
                                        </p>
                                    }
                                    else
                                    {
                                        <p class="price">@course.Prices.Currency @course.Prices.Price</p>
                                    }
                                }
                                <div class="clock">
                                    <i class="fa-regular fa-clock"></i>
                                    <p>@course.Hours hours</p>
                                    <div class="thumbs-up">
                                        <i class="fa-regular fa-thumbs-up"></i>
                                        <p>@course.LikesInProcent% (@course.Likes)</p>
                                    </div>
                                </div>
                            </div>
                        </a>
                    </div>
                }
            }
            else
            {
                <div>Loading...</div>
            }
        </div>
        <div class="pagination">
            <a class="number" href="/courses">1</a>
            <a class="number active" href="/courses">2</a>
            <a class="number" href="/courses">3</a>
        </div>
    </div>
</section>

@code {
    private List<CourseCardModel>? courses;

    protected override async Task OnInitializedAsync()
    {
        var query = new GraphQLQuery
            {
                Query = @"
        query {
            getCourses {
                id
                imageUri
                isBestseller
                title
                authors {
                    name
                }
                prices {
                    currency
                    price
                    discount
                }
                starRating
                reviews
                likesInProcent
                likes
                hours
            }
        }"
            };

        var response = await Http.PostAsJsonAsync("http://localhost:7081/api/graphql", query);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            if (result?.Data.TryGetProperty("getCourses", out var coursesJson) == true)
            {
                courses = coursesJson.EnumerateArray()
                    .Select(course => new CourseCardModel
                        {
                            Id = course.GetProperty("id").GetString()!,
                            IsBestseller = course.GetProperty("isBestseller").GetBoolean(),
                            ImageUri = course.GetProperty("imageUri").GetString(),
                            Title = course.GetProperty("title").GetString(),
                            Authors = course.GetProperty("authors").EnumerateArray()
                                .Select(author => new AuthorModel
                                {
                                    Name = author.GetProperty("name").GetString()!,
                                }).ToList(),
                            Prices = new PricesModel
                            {
                                Currency = course.GetProperty("prices").GetProperty("currency").GetString(),
                                Price = course.GetProperty("prices").GetProperty("price").GetDecimal(),
                                Discount = course.GetProperty("prices").GetProperty("discount").GetDecimal()
                            },
                            StarRating = course.GetProperty("starRating").GetDecimal(),
                            Reviews = course.GetProperty("reviews").GetString(),
                            LikesInProcent = course.GetProperty("likesInProcent").GetString(),
                            Likes = course.GetProperty("likes").GetString(),
                            Hours = course.GetProperty("hours").GetString()
                        }).ToList();
            }
        }
    }
}
